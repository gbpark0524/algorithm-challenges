package gbpark.programmers.level3;

import gbpark.common.CodingTest;

import static gbpark.common.CodingTest.DataType.INT;
import static gbpark.common.CodingTest.DataType.INT_MATRIX;

public class MatrixChainMultiplication {
	public int solution(int[][] matrix_sizes) {
		int len = matrix_sizes.length;
		int[][] dp = new int[len][len];

		for (int gap = 1; gap < len; gap++) {
			for (int s = 0; s < len - gap; s++) {
				dp[s][s+gap] = Integer.MAX_VALUE;
				for (int k = s; k < s + gap; k++) {
					dp[s][s+gap] = Math.min(dp[s][k] + matrix_sizes[s][0] * matrix_sizes[k][1] * matrix_sizes[s+gap][1] + dp[k+1][s+gap], dp[s][s+gap]);
				}
			}
		}

		return dp[0][len-1];
	}


	public static void main(String[] args) {
		MatrixChainMultiplication thisClass = new MatrixChainMultiplication();
		CodingTest test = new CodingTest<>(thisClass::solution, INT_MATRIX, INT);
		test.codingTest("[[5,3],[3,10],[10,6]]\t270");
		test.codingTest("[[9, 10], [10, 9], [9, 1]	180");
		test.codingTest("[[4, 7], [7, 6], [6, 4], [4, 1], [1, 5], [5, 3], [3, 2], [2, 9], [9, 7], [7, 4], [4, 8], [8, 2], [2, 6]	308");
		test.codingTest("[[9, 7], [7, 4], [4, 8], [8, 2]	246");
		test.codingTest("[[3, 2], [2, 9], [9, 7], [7, 4], [4, 8], [8, 2], [2, 6]	310");
		test.codingTest("[[4, 7], [7, 100], [100, 4], [4, 1]	1128");
		test.codingTest("[[4, 200], [200, 5], [5, 10], [10, 1]	1850");
		test.codingTest("[[11, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]	997");
		test.codingTest("[[11, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]	999");
		test.codingTest("[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1]	658");
		test.codingTest("[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1]	758");
		test.codingTest("[[2, 4], [4, 6], [6, 100], [100, 6], [6, 4], [4, 2]	2512");
		test.codingTest("[[11, 10], [10, 9], [9, 8], [8, 1], [1, 6], [6, 5], [5, 4], [4, 1], [1, 2], [2, 1], [1, 1], [1, 2], [2, 3], [3, 1], [1, 5], [5, 6], [6, 7], [7, 1], [1, 9], [9, 10], [10, 11]	746");
		test.codingTest	1584000000");
	}
}

/* 최적의 행렬 곱셈
* 크기가 a by b인 행렬과 크기가 b by c 인 행렬이 있을 때, 두 행렬을 곱하기 위해서는 총 a x b x c 번 곱셈해야합니다.
예를 들어서 크기가 5 by 3인 행렬과 크기가 3 by 2인 행렬을 곱할때는 총 5 x 3 x 2 = 30번의 곱하기 연산을 해야 합니다.

행렬이 2개일 때는 연산 횟수가 일정 하지만, 행렬의 개수가 3개 이상일 때는 연산의 순서에 따라서 곱하기 연산의 횟수가 바뀔 수 있습니다.
* 예를 들어서 크기가 5 by 3인 행렬 A, 크기가 3 by 10인 행렬 B, 크기가 10 by 6인 행렬 C가 있을 때, 순서대로 A와 B를 먼저 곱하고,
* 그 결과에 C를 곱하면 A와 B행렬을 곱할 때 150번을, AB 에 C를 곱할 때 300번을 연산을 해서 총 450번의 곱하기 연산을 합니다.
* 하지만, B와 C를 먼저 곱한 다음 A 와 BC를 곱하면 180 + 90 = 270번 만에 연산이 끝납니다.

각 행렬의 크기 matrix_sizes 가 매개변수로 주어 질 때, 모든 행렬을 곱하기 위한 최소 곱셈 연산의 수를 return하는 solution 함수를 완성해 주세요.

제한 사항
행렬의 개수는 3이상 200이하의 자연수입니다.
각 행렬의 행과 열의 크기는 200이하의 자연수 입니다.
계산을 할 수 없는 행렬은 입력으로 주어지지 않습니다.
입출력 예
matrix_sizes	result
[[5,3],[3,10],[10,6]]	270
[[9, 10], [10, 9], [9, 1], [1, 2]	198
[[4, 7], [7, 6], [6, 4], [4, 1], [1, 5], [5, 3], [3, 2], [2, 9], [9, 7], [7, 4], [4, 8], [8, 2], [2, 6]	308
[[9, 7], [7, 4], [4, 8], [8, 2]	246
[[3, 2], [2, 9], [9, 7], [7, 4], [4, 8], [8, 2], [2, 6]	310
[[4, 7], [7, 100], [100, 4], [4, 1]	1128
[[4, 200], [200, 5], [5, 10], [10, 1]	1850
[[11, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]	997
[[11, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11]	999
[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1]	658
[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 10], [10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1]	758
[[2, 4], [4, 6], [6, 100], [100, 6], [6, 4], [4, 2]	2512
[[11, 10], [10, 9], [9, 8], [8, 1], [1, 6], [6, 5], [5, 4], [4, 1], [1, 2], [2, 1], [1, 1], [1, 2], [2, 3], [3, 1], [1, 5], [5, 6], [6, 7], [7, 1], [1, 9], [9, 10], [10, 11]	746
	1584000000
* */
