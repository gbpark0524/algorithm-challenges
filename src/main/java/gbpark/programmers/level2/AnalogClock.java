package gbpark.programmers.level2;

import gbpark.common.TestUtil;

import java.util.*;

public class AnalogClock {
    public static void main(String[] args) {
        AnalogClock ob = new AnalogClock();
        List<int[]> qList = new ArrayList<>();
        qList.add(new int[]{0,5,30,0,7,0});
        qList.add(new int[]{12	,0	,0	,12	,0	,30});
        qList.add(new int[]{0	,6	,1	,0	,6	,6});
        qList.add(new int[]{11	,59	,30	,12	,0	,0});
        qList.add(new int[]{11	,58	,59	,11	,59	,0});
        qList.add(new int[]{1	,5	,5	,1	,5	,6});
        qList.add(new int[]{0	,0	,0	,23	,59	,59});
        int[] ans = new int[]{2,1,0,1,1,2,2852};

        for (int i = 0; i < qList.size(); i++) {
            int an = ans[i];
            int[] q = qList.get(i);
            TestUtil.test(an, ob.solution(q[0], q[1], q[2], q[3], q[4], q[5]));
        }
    }

    public int solution(int h1, int m1, int s1, int h2, int m2, int s2) {
        int answer = 0;
        int noon = 60 * 60 * 12;
        int start = s1 + m1 * 60 + h1 * 60 * 60;
        int diff = s2 + m2 * 60 + h2 * 60 * 60 - start;

        int ds = 60*12;
        int dm = 12;
        int dh = 1;

        int s = s1 * ds;
        int m = m1 * 60 * dm + s1 * dm;
        h1 %= 12;
        int h = h1 * 3600 * dh + m1 * 60 * dh +  s1 * dh;

        for (int i = 0; i < diff; i++) {
            if (s==m || s==h) answer++;
            if ((s-m)*(s+ds-m-dm) < 0) answer++;
            if ((s-h)*(s+ds-h-dh) < 0)  answer++;

            s = (s+ds)%noon;
            m = (m+dm)%noon;
            h = (h+dh)%noon;
        }

        if (s==m || s==h) answer++;
        return answer;
    }
}

/*
시침, 분침, 초침이 있는 아날로그시계가 있습니다. 시계의 시침은 12시간마다, 분침은 60분마다, 초침은 60초마다 시계를 한 바퀴 돕니다.
따라서 시침, 분침, 초침이 움직이는 속도는 일정하며 각각 다릅니다.
이 시계에는 초침이 시침/분침과 겹칠 때마다 알람이 울리는 기능이 있습니다.
당신은 특정 시간 동안 알람이 울린 횟수를 알고 싶습니다.

다음은 0시 5분 30초부터 0시 7분 0초까지 알람이 울린 횟수를 세는 예시입니다.

ex1-1.png

가장 짧은 바늘이 시침, 중간 길이인 바늘이 분침, 가장 긴 바늘이 초침입니다.
알람이 울리는 횟수를 세기 시작한 시각은 0시 5분 30초입니다.
이후 0시 6분 0초까지 초침과 시침/분침이 겹치는 일은 없습니다.
ex1-2.png

약 0시 6분 0.501초에 초침과 시침이 겹칩니다. 이때 알람이 한 번 울립니다.
이후 0시 6분 6초까지 초침과 시침/분침이 겹치는 일은 없습니다.
ex1-3.png

약 0시 6분 6.102초에 초침과 분침이 겹칩니다. 이때 알람이 한 번 울립니다.
이후 0시 7분 0초까지 초침과 시침/분침이 겹치는 일은 없습니다.
0시 5분 30초부터 0시 7분 0초까지는 알람이 두 번 울립니다. 이후 약 0시 7분 0.584초에 초침과 시침이 겹쳐서 울리는 세 번째 알람은 횟수에 포함되지 않습니다.

다음은 12시 0분 0초부터 12시 0분 30초까지 알람이 울린 횟수를 세는 예시입니다.

ex2-1.png

알람이 울리는 횟수를 세기 시작한 시각은 12시 0분 0초입니다.
초침과 시침, 분침이 겹칩니다. 이때 알람이 한 번 울립니다. 이와 같이 0시 정각, 12시 정각에 초침과 시침, 분침이 모두 겹칠 때는 알람이 한 번만 울립니다.
ex2-2.png

이후 12시 0분 30초까지 초침과 시침/분침이 겹치는 일은 없습니다.
12시 0분 0초부터 12시 0분 30초까지는 알람이 한 번 울립니다.

알람이 울리는 횟수를 센 시간을 나타내는 정수 h1, m1, s1, h2, m2, s2가 매개변수로 주어집니다. 이때, 알람이 울리는 횟수를 return 하도록 solution 함수를 완성해주세요.

제한사항
0 ≤ h1, h2 ≤ 23
0 ≤ m1, m2 ≤ 59
0 ≤ s1, s2 ≤ 59
h1시 m1분 s1초부터 h2시 m2분 s2초까지 알람이 울리는 횟수를 센다는 의미입니다.
h1시 m1분 s1초 < h2시 m2분 s2초
시간이 23시 59분 59초를 초과해서 0시 0분 0초로 돌아가는 경우는 주어지지 않습니다.
입출력 예
h1	m1	s1	h2	m2	s2	result
0	5	30	0	7	0	2
12	0	0	12	0	30	1
0	6	1	0	6	6	0
11	59	30	12	0	0	1
11	58	59	11	59	0	1
1	5	5	1	5	6	2
0	0	0	23	59	59	2852
*/

/*
* 오답노트
* 시계 문제에 익숙하지 않았더라면 난이도가 엄청 어렵게 느껴질수 있다. 
* 시계의 모든 시침과 분침은 하루에 22번밖에 만나지 않는다. 
* 정각에 만나고 1시~11시까지 시간사이에 한번씩 만난다. 분침이 한시간에 한바퀴식 도니 당연하다.
* 여기서 중요한건 세개 모두 겹칠때인데 이때는 정오밖에없다. 그리고 시침, 분침, 초침 순으로 일정한 각속도를 가지므로
* 가장빠른 초침 기준으로, 초와 초 사이에 만났는지 여부만 체크하면 된다.
* 식 세우는게 단위가 좀 햇갈려서 체감난이도 2.5 정도
* 
* 1. 귀찮아서 그냥 분수로 계산했다가 역시나 부동소수점 때문에 문제가 생겼다. 웬만하면 정수로 치환해서 하자.
* 2. 조금 귀찮아도 단위를 직관적으로 뽑으니 훨신 쉬워짐
* 3. 처음에 12시 넘어가는부분을 unit으로 나누거나 더해야 하나 착각했었음. 모두 같은 방향 운동이므로 그냥 해도 됨.
* 
* */